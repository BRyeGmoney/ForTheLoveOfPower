//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using UnityEngine.Networking;
using Gamelogic.Grids;
using BeautifulDissolves;

namespace AssemblyCSharp
{
	public enum StructureUnitType
	{
		Settlement,
		Factory,
		Exporter,
		Market,
		Barracks,
		TankDepot,
		Airport,
		Contractor,
		LabourCamp,
		Propaganda,
		None,
	}

    public enum StructureState
    {
        BeingBuilt,
        Owned,
        BeingCaptured,
        Captured,
        BeingReclaimed,
    }

	public class StructureUnit : MonoBehaviour
	{
		//Properties
		public Color StructColor { get; set; }
		public PointyHexPoint pointOnMap { get; set; }

        public Int16 ID { get { return id; } }
        protected short id;

        public StructureUnitType StructureType
		{
			get { return structureType; }
			set { structureType = value; }
		}
		private StructureUnitType structureType;

		public Settlement OwningSettlement { get; set; }

        public Material MyMaterial;
        public SpriteRenderer spriteRender;

		public Animator AnimationController 
		{
			get { return animator; }
		}
		private Animator animator;

		public int modifierAnim;
        public float percentageConquered = 0;
        public StructureState currentState;

        public StructureUnit ()
		{
		}

		public void Initialize(short id, Color structColor, StructureUnitType structType, PointyHexPoint gridPoint)
		{
            this.id = id;
			StructColor = structColor;
			StructureType = structType;
			pointOnMap = gridPoint;
            spriteRender = gameObject.GetComponent<SpriteRenderer>();
			spriteRender.color = StructColor;
            MyMaterial = spriteRender.material;
			animator = gameObject.GetComponent<Animator> ();

            currentState = StructureState.Owned; //Temporary, change this to BeingBuilt
        }

		public void Initialize(short id, Color structColor, StructureUnitType structType, PointyHexPoint gridPoint, Settlement owningSettlement)
		{
			Initialize (id, structColor, structType, gridPoint);
			OwningSettlement = owningSettlement;
		}

		public void UpdateBuilding()
		{
            if (currentState.Equals(StructureState.BeingCaptured))
            {
                percentageConquered = Mathf.Clamp(percentageConquered + (Time.deltaTime / 5), 0, 1);
                MyMaterial.SetFloat(DissolveHelper.dissolveAmountID, percentageConquered);

                if (percentageConquered >= 1)
                    currentState = StructureState.Captured;
            }
		}


        //Call this from the actual grid file
        public void BeginCapturing(Color newColor)
        {
            MyMaterial.SetColor("_SubColor", newColor);
        }

        public static int GetCostOfStructure(StructureUnitType tryingToBuild)
        {
            if (tryingToBuild.Equals(StructureUnitType.Settlement))
            {
                return 1000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.Barracks))
            {
                return 1000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.TankDepot))
            {
                return 2000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.Airport))
            {
                return 3000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.Factory))
            {
                return 1000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.Exporter))
            {
                return 2000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.Market))
            {
                return 3000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.LabourCamp))
            {
                return 1000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.Contractor))
            {
                return 2000;
            }
            else if (tryingToBuild.Equals(StructureUnitType.Propaganda))
            {
                return 3000;
            }
            else
            {
                return 1000000;
            }
        }
	}
}

