//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using Gamelogic.Grids;

namespace AssemblyCSharp
{
	public enum StructureUnitType
	{
		Settlement,
		Factory,
		Exporter,
		Market,
		Barracks,
		TankDepot,
		Airport,
		Contractor,
		LabourCamp,
		Propaganda,
		None,
	}

	public class StructureUnit : MonoBehaviour
	{
		//Properties
		public Color StructColor { get; set; }
		public PointyHexPoint pointOnMap { get; set; }

		public StructureUnitType StructureType
		{
			get { return structureType; }
			set { structureType = value; }
		}
		private StructureUnitType structureType;

		public Settlement OwningSettlement { get; set; }

		public Animator AnimationController 
		{
			get { return animator; }
		}
		private Animator animator;

		public StructureUnit ()
		{
		}

		public void Initialize(Color structColor, StructureUnitType structType, PointyHexPoint gridPoint)
		{
			StructColor = structColor;
			StructureType = structType;
			pointOnMap = gridPoint;
			gameObject.GetComponent<SpriteRenderer> ().color = StructColor;
			animator = gameObject.GetComponent<Animator> ();
		}

		public void Initialize(Color structColor, StructureUnitType structType, PointyHexPoint gridPoint, Settlement owningSettlement)
		{
			Initialize (structColor, structType, gridPoint);
			OwningSettlement = owningSettlement;
		}

		public void UpdateBuilding(Player owningPlayer)
		{
		}
	}

	public static class CreateStructureUnit
	{
		public static StructureUnit CreateFromType(StructureUnitType structType, PointyHexPoint pointOnGrid, Color structColor)
		{
			/*if (structType.Equals (StructureUnitType.Settlement))
				return null;// CreateSettlement (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.Factory))
				return CreateFactory (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.Exporter))
				return CreateExporter (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.Market))
				return CreateMarket (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.Barracks))
				return CreateBarracks (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.TankDepot))
				return CreateTankDepot (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.Airport))
				return CreateAirport (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.Contractor))
				return CreateContractor (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.LabourCamp))
				return CreateLabourCamp (pointOnGrid, structColor);
			else if (structType.Equals (StructureUnitType.Propaganda))
				return CreatePropaganda (pointOnGrid, structColor);
			else*/
				return null;
		}

		/*public static Settlement CreateSettlement(PointyHexPoint pointOnGrid, Color structColor)
		{
			return null;//new Settlement () { StructureType = StructureUnitType.Settlement, StructureSpriteIndex = (short)StructureAnimationIndex.Settlement, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreateFactory(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.Factory, StructureSpriteIndex = (short)StructureAnimationIndex.Factory, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreateExporter(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.Exporter, StructureSpriteIndex = (short)StructureAnimationIndex.Exporter, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreateMarket(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.Market, StructureSpriteIndex = (short)StructureAnimationIndex.Market, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreateContractor(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.Contractor, StructureSpriteIndex = (short)StructureAnimationIndex.Contractor, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreateLabourCamp(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.LabourCamp, StructureSpriteIndex = (short)StructureAnimationIndex.LabourCamp, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreatePropaganda(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.Propaganda, StructureSpriteIndex = (short)StructureAnimationIndex.Propaganda, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreateBarracks(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.Barracks, StructureSpriteIndex = (short)StructureAnimationIndex.Barracks, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreateTankDepot(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.TankDepot, StructureSpriteIndex = (short)StructureAnimationIndex.TankDepot, StructColor = structColor, pointOnMap = pointOnGrid };
		}

		public static StructureUnit CreateAirport(PointyHexPoint pointOnGrid, Color structColor)
		{
			return new StructureUnit () { StructureType = StructureUnitType.Airport, StructureSpriteIndex = (short)StructureAnimationIndex.Airport, StructColor = structColor, pointOnMap = pointOnGrid };
		}*/
	}
}

